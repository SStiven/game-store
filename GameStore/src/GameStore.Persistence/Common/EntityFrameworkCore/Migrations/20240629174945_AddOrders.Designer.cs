// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SmartShop.Infrastructure.Persistance.Common.EntityFrameworkCore;

#nullable disable

namespace GameStore.Persistence.Common.EntityFrameworkCore.Migrations
{
    [DbContext(typeof(GameStoreSqlServerDbContext))]
    [Migration("20240629174945_AddOrders")]
    partial class AddOrders
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("GameStore.Domain.Games.Game", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("description");

                    b.Property<int>("Discount")
                        .HasColumnType("int")
                        .HasColumnName("discount");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasMaxLength(105)
                        .HasColumnType("nvarchar(105)")
                        .HasColumnName("key");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("name");

                    b.Property<double>("Price")
                        .HasColumnType("float")
                        .HasColumnName("price");

                    b.Property<Guid>("PublisherId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("publisher_id");

                    b.Property<int>("UnitInStock")
                        .HasColumnType("int")
                        .HasColumnName("unit_in_stock");

                    b.HasKey("Id");

                    b.HasIndex("Key")
                        .IsUnique();

                    b.HasIndex("PublisherId");

                    b.ToTable("game", (string)null);
                });

            modelBuilder.Entity("GameStore.Domain.Games.GameGenre", b =>
                {
                    b.Property<Guid>("GameId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("game_id");

                    b.Property<Guid>("GenreId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("genre_id");

                    b.HasKey("GameId", "GenreId");

                    b.HasIndex("GenreId");

                    b.ToTable("game_genre", (string)null);
                });

            modelBuilder.Entity("GameStore.Domain.Games.GamePlatform", b =>
                {
                    b.Property<Guid>("GameId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("game_id");

                    b.Property<Guid>("PlatformId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("platform_id");

                    b.HasKey("GameId", "PlatformId");

                    b.HasIndex("PlatformId");

                    b.ToTable("game_platform", (string)null);
                });

            modelBuilder.Entity("GameStore.Domain.Genres.Genre", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("name");

                    b.Property<Guid?>("ParentGenreId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("parent_genre_id");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("ParentGenreId");

                    b.ToTable("genre", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("324c098d-3c39-4a6d-a37c-47a042c850d0"),
                            Name = "RTS"
                        },
                        new
                        {
                            Id = new Guid("ae7edb24-ae01-4f13-9c67-558850896fda"),
                            Name = "TBS",
                            ParentGenreId = new Guid("324c098d-3c39-4a6d-a37c-47a042c850d0")
                        },
                        new
                        {
                            Id = new Guid("94230625-8f65-421d-8521-b6f92c22f39c"),
                            Name = "RPG"
                        },
                        new
                        {
                            Id = new Guid("8f1de765-9132-4ac9-b0bf-3b0102951a8f"),
                            Name = "Sports"
                        },
                        new
                        {
                            Id = new Guid("a2f06067-05a1-4be6-92d5-a37c6c3639f9"),
                            Name = "Races"
                        },
                        new
                        {
                            Id = new Guid("d6fe40c9-0882-4cbb-a484-a3a969adb769"),
                            Name = "Rally",
                            ParentGenreId = new Guid("a2f06067-05a1-4be6-92d5-a37c6c3639f9")
                        },
                        new
                        {
                            Id = new Guid("ca517ffc-e948-4028-8d6d-4517c62a9b1a"),
                            Name = "Arcade",
                            ParentGenreId = new Guid("a2f06067-05a1-4be6-92d5-a37c6c3639f9")
                        },
                        new
                        {
                            Id = new Guid("38ba7126-80c5-4011-a62d-b6a7c5e03d70"),
                            Name = "Formula",
                            ParentGenreId = new Guid("a2f06067-05a1-4be6-92d5-a37c6c3639f9")
                        },
                        new
                        {
                            Id = new Guid("a1ba50a4-8409-4f2b-b2bc-936bc6b811c1"),
                            Name = "Off-road",
                            ParentGenreId = new Guid("a2f06067-05a1-4be6-92d5-a37c6c3639f9")
                        },
                        new
                        {
                            Id = new Guid("51f7b426-3644-40d8-8d1c-f8295c2a9da1"),
                            Name = "Action"
                        },
                        new
                        {
                            Id = new Guid("3965ff49-822f-4a57-9a66-197b9222cf9a"),
                            Name = "FPS",
                            ParentGenreId = new Guid("51f7b426-3644-40d8-8d1c-f8295c2a9da1")
                        },
                        new
                        {
                            Id = new Guid("7057d1e6-e2b4-4781-b971-a42ba98e9980"),
                            Name = "TPS",
                            ParentGenreId = new Guid("51f7b426-3644-40d8-8d1c-f8295c2a9da1")
                        },
                        new
                        {
                            Id = new Guid("7e1287c4-804d-4bdd-9d09-e132beffd7dd"),
                            Name = "Adventure"
                        },
                        new
                        {
                            Id = new Guid("9f3abf3b-c3d0-41bb-b925-82d018ca9074"),
                            Name = "Puzzle & Skill"
                        });
                });

            modelBuilder.Entity("GameStore.Domain.Orders.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("customer_id");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime2")
                        .HasColumnName("data");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("status");

                    b.HasKey("Id");

                    b.ToTable("order", (string)null);
                });

            modelBuilder.Entity("GameStore.Domain.Orders.OrderGame", b =>
                {
                    b.Property<Guid>("OrderId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("order_id");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("product_id");

                    b.Property<int?>("Discount")
                        .HasColumnType("int")
                        .HasColumnName("discount");

                    b.Property<double>("Price")
                        .HasColumnType("float")
                        .HasColumnName("price");

                    b.Property<int>("Quantity")
                        .HasColumnType("int")
                        .HasColumnName("quantity");

                    b.HasKey("OrderId", "ProductId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderGame");
                });

            modelBuilder.Entity("GameStore.Domain.Platforms.Platform", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("type");

                    b.HasKey("Id");

                    b.HasIndex("Type")
                        .IsUnique();

                    b.ToTable("platform", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("ad9fed5c-0a8b-4535-a9fc-93b0361f1354"),
                            Type = "Mobile"
                        },
                        new
                        {
                            Id = new Guid("32f8c5db-be1c-4d5c-8df7-7eb1bf00cc4d"),
                            Type = "Browser"
                        },
                        new
                        {
                            Id = new Guid("a30dcbd2-6107-42d4-a884-52f971d7dc6c"),
                            Type = "Desktop"
                        },
                        new
                        {
                            Id = new Guid("5ad354f4-13fb-482a-b0ff-12e79c0b7474"),
                            Type = "Console"
                        });
                });

            modelBuilder.Entity("GameStore.Domain.Publishers.Publisher", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("company_name");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("description");

                    b.Property<string>("HomePage")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("home_page");

                    b.HasKey("Id");

                    b.HasIndex("CompanyName")
                        .IsUnique();

                    b.ToTable("publisher", (string)null);
                });

            modelBuilder.Entity("GameStore.Domain.Games.Game", b =>
                {
                    b.HasOne("GameStore.Domain.Publishers.Publisher", "Publisher")
                        .WithMany("Games")
                        .HasForeignKey("PublisherId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Publisher");
                });

            modelBuilder.Entity("GameStore.Domain.Games.GameGenre", b =>
                {
                    b.HasOne("GameStore.Domain.Games.Game", "Game")
                        .WithMany("GameGenres")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GameStore.Domain.Genres.Genre", "Genre")
                        .WithMany("GameGenres")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Game");

                    b.Navigation("Genre");
                });

            modelBuilder.Entity("GameStore.Domain.Games.GamePlatform", b =>
                {
                    b.HasOne("GameStore.Domain.Games.Game", "Game")
                        .WithMany("GamePlatforms")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GameStore.Domain.Platforms.Platform", "Platform")
                        .WithMany("GamePlatforms")
                        .HasForeignKey("PlatformId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Game");

                    b.Navigation("Platform");
                });

            modelBuilder.Entity("GameStore.Domain.Genres.Genre", b =>
                {
                    b.HasOne("GameStore.Domain.Genres.Genre", "ParentGenre")
                        .WithMany("SubGenres")
                        .HasForeignKey("ParentGenreId");

                    b.Navigation("ParentGenre");
                });

            modelBuilder.Entity("GameStore.Domain.Orders.OrderGame", b =>
                {
                    b.HasOne("GameStore.Domain.Orders.Order", "Order")
                        .WithMany("OrderGames")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GameStore.Domain.Games.Game", "Game")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Game");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("GameStore.Domain.Games.Game", b =>
                {
                    b.Navigation("GameGenres");

                    b.Navigation("GamePlatforms");
                });

            modelBuilder.Entity("GameStore.Domain.Genres.Genre", b =>
                {
                    b.Navigation("GameGenres");

                    b.Navigation("SubGenres");
                });

            modelBuilder.Entity("GameStore.Domain.Orders.Order", b =>
                {
                    b.Navigation("OrderGames");
                });

            modelBuilder.Entity("GameStore.Domain.Platforms.Platform", b =>
                {
                    b.Navigation("GamePlatforms");
                });

            modelBuilder.Entity("GameStore.Domain.Publishers.Publisher", b =>
                {
                    b.Navigation("Games");
                });
#pragma warning restore 612, 618
        }
    }
}
