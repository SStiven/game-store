// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SmartShop.Infrastructure.Persistance.Common.EntityFrameworkCore;

#nullable disable

namespace GameStore.Persistence.Common.EntityFrameworkCore.Migrations
{
    [DbContext(typeof(GameStoreSqlServerDbContext))]
    [Migration("20240530023627_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("GameStore.Domain.Games.Game", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("description");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("key");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.HasIndex("Key")
                        .IsUnique();

                    b.ToTable("game", (string)null);
                });

            modelBuilder.Entity("GameStore.Domain.Games.GameGenre", b =>
                {
                    b.Property<Guid>("GameId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("game_id");

                    b.Property<Guid>("GenreId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("genre_id");

                    b.HasKey("GameId", "GenreId");

                    b.HasIndex("GenreId");

                    b.ToTable("game_genre", (string)null);
                });

            modelBuilder.Entity("GameStore.Domain.Games.GamePlatform", b =>
                {
                    b.Property<Guid>("GameId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("game_id");

                    b.Property<Guid>("PlatformId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("platform_id");

                    b.HasKey("GameId", "PlatformId");

                    b.HasIndex("PlatformId");

                    b.ToTable("game_platform", (string)null);
                });

            modelBuilder.Entity("GameStore.Domain.Genres.Genre", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("name");

                    b.Property<Guid?>("ParentGenreId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("parent_genre_id");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("ParentGenreId");

                    b.ToTable("genre", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("e9b6c311-ff9e-47ce-bf47-89c64a1ea2ed"),
                            Name = "Strategy"
                        },
                        new
                        {
                            Id = new Guid("0bc9b264-ea4e-4842-9ce1-cdbc6e48aac3"),
                            Name = "RTS",
                            ParentGenreId = new Guid("e9b6c311-ff9e-47ce-bf47-89c64a1ea2ed")
                        },
                        new
                        {
                            Id = new Guid("eb714918-05ad-49e0-b1c4-1551e2e45f63"),
                            Name = "TBS",
                            ParentGenreId = new Guid("e9b6c311-ff9e-47ce-bf47-89c64a1ea2ed")
                        },
                        new
                        {
                            Id = new Guid("539a11e6-ef8e-4718-a0b7-7a9ea7594645"),
                            Name = "RPG"
                        },
                        new
                        {
                            Id = new Guid("566151a8-9412-4731-9ac7-d97efcd829fd"),
                            Name = "Sports"
                        },
                        new
                        {
                            Id = new Guid("7c7e700e-7bdc-4d99-9eeb-6389604ee3e4"),
                            Name = "Races"
                        },
                        new
                        {
                            Id = new Guid("69380ec4-0926-4a41-8a47-c57ec407d4d7"),
                            Name = "Rally",
                            ParentGenreId = new Guid("7c7e700e-7bdc-4d99-9eeb-6389604ee3e4")
                        },
                        new
                        {
                            Id = new Guid("c92f983e-7ae1-4b4a-b269-d7bd0008ae85"),
                            Name = "Arcade",
                            ParentGenreId = new Guid("7c7e700e-7bdc-4d99-9eeb-6389604ee3e4")
                        },
                        new
                        {
                            Id = new Guid("4d97b2ce-13e6-4950-923b-715689f4ff38"),
                            Name = "Formula",
                            ParentGenreId = new Guid("7c7e700e-7bdc-4d99-9eeb-6389604ee3e4")
                        },
                        new
                        {
                            Id = new Guid("015b74ba-68ab-4b11-bab5-3399bccbff1f"),
                            Name = "Off-road",
                            ParentGenreId = new Guid("7c7e700e-7bdc-4d99-9eeb-6389604ee3e4")
                        },
                        new
                        {
                            Id = new Guid("788645ae-ea06-4013-8664-11d3cedcf756"),
                            Name = "Action"
                        },
                        new
                        {
                            Id = new Guid("7245fed8-4802-4668-9732-37b19b3f853e"),
                            Name = "FPS",
                            ParentGenreId = new Guid("788645ae-ea06-4013-8664-11d3cedcf756")
                        },
                        new
                        {
                            Id = new Guid("d1951207-eb9b-4c24-b32a-3b751275376b"),
                            Name = "TPS",
                            ParentGenreId = new Guid("788645ae-ea06-4013-8664-11d3cedcf756")
                        },
                        new
                        {
                            Id = new Guid("47a196b1-f734-4cda-b8f1-55eeade8c3f8"),
                            Name = "Adventure"
                        },
                        new
                        {
                            Id = new Guid("4f17398d-7316-4ddb-8001-498dac4a0642"),
                            Name = "Puzzle & Skill"
                        });
                });

            modelBuilder.Entity("GameStore.Domain.Platforms.Platform", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("type");

                    b.HasKey("Id");

                    b.HasIndex("Type")
                        .IsUnique();

                    b.ToTable("platform", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("e5bd3bec-2c19-4672-9f15-cd47aa277bfe"),
                            Type = "Mobile"
                        },
                        new
                        {
                            Id = new Guid("578e223f-82da-4c58-99c2-219e72ddba19"),
                            Type = "Browser"
                        },
                        new
                        {
                            Id = new Guid("027eec94-73fd-4d04-8219-2a63b8d85cca"),
                            Type = "Desktop"
                        },
                        new
                        {
                            Id = new Guid("22f409cd-f783-4738-9875-e520d5c62d42"),
                            Type = "Console"
                        });
                });

            modelBuilder.Entity("GameStore.Domain.Games.GameGenre", b =>
                {
                    b.HasOne("GameStore.Domain.Games.Game", "Game")
                        .WithMany("GameGenres")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GameStore.Domain.Genres.Genre", "Genre")
                        .WithMany("GameGenres")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Game");

                    b.Navigation("Genre");
                });

            modelBuilder.Entity("GameStore.Domain.Games.GamePlatform", b =>
                {
                    b.HasOne("GameStore.Domain.Games.Game", "Game")
                        .WithMany("GamePlatforms")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GameStore.Domain.Platforms.Platform", "Platform")
                        .WithMany("GamePlatforms")
                        .HasForeignKey("PlatformId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Game");

                    b.Navigation("Platform");
                });

            modelBuilder.Entity("GameStore.Domain.Genres.Genre", b =>
                {
                    b.HasOne("GameStore.Domain.Genres.Genre", "ParentGenre")
                        .WithMany("SubGenres")
                        .HasForeignKey("ParentGenreId");

                    b.Navigation("ParentGenre");
                });

            modelBuilder.Entity("GameStore.Domain.Games.Game", b =>
                {
                    b.Navigation("GameGenres");

                    b.Navigation("GamePlatforms");
                });

            modelBuilder.Entity("GameStore.Domain.Genres.Genre", b =>
                {
                    b.Navigation("GameGenres");

                    b.Navigation("SubGenres");
                });

            modelBuilder.Entity("GameStore.Domain.Platforms.Platform", b =>
                {
                    b.Navigation("GamePlatforms");
                });
#pragma warning restore 612, 618
        }
    }
}
