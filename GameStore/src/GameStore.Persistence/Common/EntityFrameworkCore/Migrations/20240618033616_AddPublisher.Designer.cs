// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SmartShop.Infrastructure.Persistance.Common.EntityFrameworkCore;

#nullable disable

namespace GameStore.Persistence.Common.EntityFrameworkCore.Migrations
{
    [DbContext(typeof(GameStoreSqlServerDbContext))]
    [Migration("20240618033616_AddPublisher")]
    partial class AddPublisher
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("GameStore.Domain.Games.Game", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("description");

                    b.Property<int>("Discount")
                        .HasColumnType("int")
                        .HasColumnName("discount");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasMaxLength(105)
                        .HasColumnType("nvarchar(105)")
                        .HasColumnName("key");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("name");

                    b.Property<double>("Price")
                        .HasColumnType("float")
                        .HasColumnName("price");

                    b.Property<Guid>("PublisherId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("publisher_id");

                    b.Property<int>("UnitInStock")
                        .HasColumnType("int")
                        .HasColumnName("unit_in_stock");

                    b.HasKey("Id");

                    b.HasIndex("Key")
                        .IsUnique();

                    b.HasIndex("PublisherId");

                    b.ToTable("game", (string)null);
                });

            modelBuilder.Entity("GameStore.Domain.Games.GameGenre", b =>
                {
                    b.Property<Guid>("GameId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("game_id");

                    b.Property<Guid>("GenreId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("genre_id");

                    b.HasKey("GameId", "GenreId");

                    b.HasIndex("GenreId");

                    b.ToTable("game_genre", (string)null);
                });

            modelBuilder.Entity("GameStore.Domain.Games.GamePlatform", b =>
                {
                    b.Property<Guid>("GameId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("game_id");

                    b.Property<Guid>("PlatformId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("platform_id");

                    b.HasKey("GameId", "PlatformId");

                    b.HasIndex("PlatformId");

                    b.ToTable("game_platform", (string)null);
                });

            modelBuilder.Entity("GameStore.Domain.Genres.Genre", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("name");

                    b.Property<Guid?>("ParentGenreId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("parent_genre_id");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("ParentGenreId");

                    b.ToTable("genre", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("1254c6eb-7fc2-4387-9004-c0cb46a18070"),
                            Name = "RTS"
                        },
                        new
                        {
                            Id = new Guid("a5373f44-39c4-41cc-93df-3d6b6ac9d6a5"),
                            Name = "TBS",
                            ParentGenreId = new Guid("1254c6eb-7fc2-4387-9004-c0cb46a18070")
                        },
                        new
                        {
                            Id = new Guid("1a89a9ad-c4bf-4e56-b3e4-1f29c1ed4a66"),
                            Name = "RPG"
                        },
                        new
                        {
                            Id = new Guid("ece41bea-230f-413f-8d31-d89708cc3112"),
                            Name = "Sports"
                        },
                        new
                        {
                            Id = new Guid("e73c7ff1-67be-47f6-b42a-0a80ec26e105"),
                            Name = "Races"
                        },
                        new
                        {
                            Id = new Guid("e2079696-7a5f-48ea-8507-2cbfa33328b6"),
                            Name = "Rally",
                            ParentGenreId = new Guid("e73c7ff1-67be-47f6-b42a-0a80ec26e105")
                        },
                        new
                        {
                            Id = new Guid("e7a02f23-cb7d-4571-bd10-c65db678c935"),
                            Name = "Arcade",
                            ParentGenreId = new Guid("e73c7ff1-67be-47f6-b42a-0a80ec26e105")
                        },
                        new
                        {
                            Id = new Guid("aa450b18-e5fb-448a-8f6e-df74bca0f418"),
                            Name = "Formula",
                            ParentGenreId = new Guid("e73c7ff1-67be-47f6-b42a-0a80ec26e105")
                        },
                        new
                        {
                            Id = new Guid("900f6745-025d-4eb2-a1ff-e9e7162ea090"),
                            Name = "Off-road",
                            ParentGenreId = new Guid("e73c7ff1-67be-47f6-b42a-0a80ec26e105")
                        },
                        new
                        {
                            Id = new Guid("dbc819f1-7e7d-4830-89fd-8dc21b3f8da5"),
                            Name = "Action"
                        },
                        new
                        {
                            Id = new Guid("76598919-f635-411b-b47c-50cdcf9d43e3"),
                            Name = "FPS",
                            ParentGenreId = new Guid("dbc819f1-7e7d-4830-89fd-8dc21b3f8da5")
                        },
                        new
                        {
                            Id = new Guid("aba032a7-e09f-4deb-b807-99ab085c659b"),
                            Name = "TPS",
                            ParentGenreId = new Guid("dbc819f1-7e7d-4830-89fd-8dc21b3f8da5")
                        },
                        new
                        {
                            Id = new Guid("4df6fa1a-8ee4-4f7c-960e-899f5d90e4bf"),
                            Name = "Adventure"
                        },
                        new
                        {
                            Id = new Guid("3def8c3d-a340-4a83-b886-603cff5318cf"),
                            Name = "Puzzle & Skill"
                        });
                });

            modelBuilder.Entity("GameStore.Domain.Platforms.Platform", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("type");

                    b.HasKey("Id");

                    b.HasIndex("Type")
                        .IsUnique();

                    b.ToTable("platform", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("e6569b06-4bed-449c-89bb-049387f7324c"),
                            Type = "Mobile"
                        },
                        new
                        {
                            Id = new Guid("2642586d-e405-434a-8134-d30481bc00f7"),
                            Type = "Browser"
                        },
                        new
                        {
                            Id = new Guid("41a16a1c-4c44-4e9f-8cdb-b1cbca7e6770"),
                            Type = "Desktop"
                        },
                        new
                        {
                            Id = new Guid("3fd79899-b275-469f-949f-4a9cae8df6bc"),
                            Type = "Console"
                        });
                });

            modelBuilder.Entity("GameStore.Domain.Publishers.Publisher", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("company_name");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("description");

                    b.Property<string>("HomePage")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("home_page");

                    b.HasKey("Id");

                    b.HasIndex("CompanyName")
                        .IsUnique();

                    b.ToTable("publisher", (string)null);
                });

            modelBuilder.Entity("GameStore.Domain.Games.Game", b =>
                {
                    b.HasOne("GameStore.Domain.Publishers.Publisher", "Publisher")
                        .WithMany("Games")
                        .HasForeignKey("PublisherId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Publisher");
                });

            modelBuilder.Entity("GameStore.Domain.Games.GameGenre", b =>
                {
                    b.HasOne("GameStore.Domain.Games.Game", "Game")
                        .WithMany("GameGenres")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GameStore.Domain.Genres.Genre", "Genre")
                        .WithMany("GameGenres")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Game");

                    b.Navigation("Genre");
                });

            modelBuilder.Entity("GameStore.Domain.Games.GamePlatform", b =>
                {
                    b.HasOne("GameStore.Domain.Games.Game", "Game")
                        .WithMany("GamePlatforms")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GameStore.Domain.Platforms.Platform", "Platform")
                        .WithMany("GamePlatforms")
                        .HasForeignKey("PlatformId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Game");

                    b.Navigation("Platform");
                });

            modelBuilder.Entity("GameStore.Domain.Genres.Genre", b =>
                {
                    b.HasOne("GameStore.Domain.Genres.Genre", "ParentGenre")
                        .WithMany("SubGenres")
                        .HasForeignKey("ParentGenreId");

                    b.Navigation("ParentGenre");
                });

            modelBuilder.Entity("GameStore.Domain.Games.Game", b =>
                {
                    b.Navigation("GameGenres");

                    b.Navigation("GamePlatforms");
                });

            modelBuilder.Entity("GameStore.Domain.Genres.Genre", b =>
                {
                    b.Navigation("GameGenres");

                    b.Navigation("SubGenres");
                });

            modelBuilder.Entity("GameStore.Domain.Platforms.Platform", b =>
                {
                    b.Navigation("GamePlatforms");
                });

            modelBuilder.Entity("GameStore.Domain.Publishers.Publisher", b =>
                {
                    b.Navigation("Games");
                });
#pragma warning restore 612, 618
        }
    }
}
