// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace GameStore.Persistence.Common.EntityFrameworkCore.Migrations
{
    [DbContext(typeof(GameStoreSqlServerDbContext))]
    [Migration("20240720235436_AddUserBan")]
    partial class AddUserBan
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("GameStore.Domain.Bans.UserBan", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<DateTime>("ExpirationDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("expiration_date");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("user_name");

                    b.HasKey("Id");

                    b.HasIndex("UserName")
                        .IsUnique();

                    b.ToTable("user_ban", (string)null);
                });

            modelBuilder.Entity("GameStore.Domain.Comments.Comment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("body");

                    b.Property<Guid>("GameId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("game_id");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("name");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("parent_id");

                    b.Property<int>("Type")
                        .HasColumnType("int")
                        .HasColumnName("type");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.HasIndex("ParentId");

                    b.ToTable("comment", (string)null);
                });

            modelBuilder.Entity("GameStore.Domain.Games.Game", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("description");

                    b.Property<int>("Discount")
                        .HasColumnType("int")
                        .HasColumnName("discount");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasMaxLength(105)
                        .HasColumnType("nvarchar(105)")
                        .HasColumnName("key");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("name");

                    b.Property<double>("Price")
                        .HasColumnType("float")
                        .HasColumnName("price");

                    b.Property<Guid>("PublisherId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("publisher_id");

                    b.Property<int>("UnitInStock")
                        .HasColumnType("int")
                        .HasColumnName("unit_in_stock");

                    b.HasKey("Id");

                    b.HasIndex("Key")
                        .IsUnique();

                    b.HasIndex("PublisherId");

                    b.ToTable("game", (string)null);
                });

            modelBuilder.Entity("GameStore.Domain.Games.GameGenre", b =>
                {
                    b.Property<Guid>("GameId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("game_id");

                    b.Property<Guid>("GenreId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("genre_id");

                    b.HasKey("GameId", "GenreId");

                    b.HasIndex("GenreId");

                    b.ToTable("game_genre", (string)null);
                });

            modelBuilder.Entity("GameStore.Domain.Games.GamePlatform", b =>
                {
                    b.Property<Guid>("GameId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("game_id");

                    b.Property<Guid>("PlatformId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("platform_id");

                    b.HasKey("GameId", "PlatformId");

                    b.HasIndex("PlatformId");

                    b.ToTable("game_platform", (string)null);
                });

            modelBuilder.Entity("GameStore.Domain.Genres.Genre", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("name");

                    b.Property<Guid?>("ParentGenreId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("parent_genre_id");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("ParentGenreId");

                    b.ToTable("genre", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("1374ef94-5e22-454d-a5c5-aa3042ae889b"),
                            Name = "RTS"
                        },
                        new
                        {
                            Id = new Guid("cb055253-ac8c-4f1d-bf32-9b707725c926"),
                            Name = "TBS",
                            ParentGenreId = new Guid("1374ef94-5e22-454d-a5c5-aa3042ae889b")
                        },
                        new
                        {
                            Id = new Guid("3d281a91-a47e-4837-98be-b513f5880b0c"),
                            Name = "RPG"
                        },
                        new
                        {
                            Id = new Guid("29d6e228-b6a4-4f08-add7-eb74ee5704ae"),
                            Name = "Sports"
                        },
                        new
                        {
                            Id = new Guid("69cd00ab-cd62-405a-9b5b-6fb25c0bf9e1"),
                            Name = "Races"
                        },
                        new
                        {
                            Id = new Guid("02eb0416-f338-4aed-847b-8d6b37d2d917"),
                            Name = "Rally",
                            ParentGenreId = new Guid("69cd00ab-cd62-405a-9b5b-6fb25c0bf9e1")
                        },
                        new
                        {
                            Id = new Guid("3f0f10c8-b2f5-4e32-bb7d-6b03e687f9d2"),
                            Name = "Arcade",
                            ParentGenreId = new Guid("69cd00ab-cd62-405a-9b5b-6fb25c0bf9e1")
                        },
                        new
                        {
                            Id = new Guid("12107e8d-99ef-4572-adf8-32e5330f6a10"),
                            Name = "Formula",
                            ParentGenreId = new Guid("69cd00ab-cd62-405a-9b5b-6fb25c0bf9e1")
                        },
                        new
                        {
                            Id = new Guid("52057bd3-70a4-4e3a-9fe4-d1f0ae5cb73c"),
                            Name = "Off-road",
                            ParentGenreId = new Guid("69cd00ab-cd62-405a-9b5b-6fb25c0bf9e1")
                        },
                        new
                        {
                            Id = new Guid("a5ee5b02-c0ca-40b4-9b88-8c140f9b2fbc"),
                            Name = "Action"
                        },
                        new
                        {
                            Id = new Guid("3b8481df-090e-43aa-a4f2-7954d67644c0"),
                            Name = "FPS",
                            ParentGenreId = new Guid("a5ee5b02-c0ca-40b4-9b88-8c140f9b2fbc")
                        },
                        new
                        {
                            Id = new Guid("bcf0cb9c-baf8-4e64-8aaf-04d2825b7eed"),
                            Name = "TPS",
                            ParentGenreId = new Guid("a5ee5b02-c0ca-40b4-9b88-8c140f9b2fbc")
                        },
                        new
                        {
                            Id = new Guid("cc7917a9-a10f-42e2-b769-c35e191b5026"),
                            Name = "Adventure"
                        },
                        new
                        {
                            Id = new Guid("d9b90777-a9ea-446c-9e39-2403ece59de9"),
                            Name = "Puzzle & Skill"
                        });
                });

            modelBuilder.Entity("GameStore.Domain.Orders.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("customer_id");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime2")
                        .HasColumnName("date");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("status");

                    b.HasKey("Id");

                    b.ToTable("order", (string)null);
                });

            modelBuilder.Entity("GameStore.Domain.Orders.OrderGame", b =>
                {
                    b.Property<Guid>("OrderId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("order_id");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("product_id");

                    b.Property<int?>("Discount")
                        .HasColumnType("int")
                        .HasColumnName("discount");

                    b.Property<double>("Price")
                        .HasColumnType("float")
                        .HasColumnName("price");

                    b.Property<int>("Quantity")
                        .HasColumnType("int")
                        .HasColumnName("quantity");

                    b.HasKey("OrderId", "ProductId");

                    b.HasIndex("ProductId");

                    b.ToTable("order_game", (string)null);
                });

            modelBuilder.Entity("GameStore.Domain.Platforms.Platform", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("type");

                    b.HasKey("Id");

                    b.HasIndex("Type")
                        .IsUnique();

                    b.ToTable("platform", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("adcd8738-891d-4ff5-a4db-a6772b93195b"),
                            Type = "Mobile"
                        },
                        new
                        {
                            Id = new Guid("0d640fff-bf08-4909-960d-e8c4461c1b03"),
                            Type = "Browser"
                        },
                        new
                        {
                            Id = new Guid("3d99ab7d-04af-4d8b-888d-4bbb313e8678"),
                            Type = "Desktop"
                        },
                        new
                        {
                            Id = new Guid("2d504166-4b1f-4f7d-b630-cdd753e6dd8f"),
                            Type = "Console"
                        });
                });

            modelBuilder.Entity("GameStore.Domain.Publishers.Publisher", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("company_name");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("description");

                    b.Property<string>("HomePage")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("home_page");

                    b.HasKey("Id");

                    b.HasIndex("CompanyName")
                        .IsUnique();

                    b.ToTable("publisher", (string)null);
                });

            modelBuilder.Entity("GameStore.Domain.Comments.Comment", b =>
                {
                    b.HasOne("GameStore.Domain.Comments.Comment", "ParentComment")
                        .WithMany("Replies")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.ClientCascade);

                    b.Navigation("ParentComment");
                });

            modelBuilder.Entity("GameStore.Domain.Games.Game", b =>
                {
                    b.HasOne("GameStore.Domain.Publishers.Publisher", "Publisher")
                        .WithMany("Games")
                        .HasForeignKey("PublisherId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Publisher");
                });

            modelBuilder.Entity("GameStore.Domain.Games.GameGenre", b =>
                {
                    b.HasOne("GameStore.Domain.Games.Game", "Game")
                        .WithMany("GameGenres")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GameStore.Domain.Genres.Genre", "Genre")
                        .WithMany("GameGenres")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Game");

                    b.Navigation("Genre");
                });

            modelBuilder.Entity("GameStore.Domain.Games.GamePlatform", b =>
                {
                    b.HasOne("GameStore.Domain.Games.Game", "Game")
                        .WithMany("GamePlatforms")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GameStore.Domain.Platforms.Platform", "Platform")
                        .WithMany("GamePlatforms")
                        .HasForeignKey("PlatformId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Game");

                    b.Navigation("Platform");
                });

            modelBuilder.Entity("GameStore.Domain.Genres.Genre", b =>
                {
                    b.HasOne("GameStore.Domain.Genres.Genre", "ParentGenre")
                        .WithMany("SubGenres")
                        .HasForeignKey("ParentGenreId");

                    b.Navigation("ParentGenre");
                });

            modelBuilder.Entity("GameStore.Domain.Orders.OrderGame", b =>
                {
                    b.HasOne("GameStore.Domain.Orders.Order", "Order")
                        .WithMany("OrderGames")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GameStore.Domain.Games.Game", "Game")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Game");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("GameStore.Domain.Comments.Comment", b =>
                {
                    b.Navigation("Replies");
                });

            modelBuilder.Entity("GameStore.Domain.Games.Game", b =>
                {
                    b.Navigation("GameGenres");

                    b.Navigation("GamePlatforms");
                });

            modelBuilder.Entity("GameStore.Domain.Genres.Genre", b =>
                {
                    b.Navigation("GameGenres");

                    b.Navigation("SubGenres");
                });

            modelBuilder.Entity("GameStore.Domain.Orders.Order", b =>
                {
                    b.Navigation("OrderGames");
                });

            modelBuilder.Entity("GameStore.Domain.Platforms.Platform", b =>
                {
                    b.Navigation("GamePlatforms");
                });

            modelBuilder.Entity("GameStore.Domain.Publishers.Publisher", b =>
                {
                    b.Navigation("Games");
                });
#pragma warning restore 612, 618
        }
    }
}
